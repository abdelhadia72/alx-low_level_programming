!<arch>
0-isupper.c/    0           0     0     644     345       `
#include "main.h"

/**
 * _isupper - function checks upperkeys
 * Description: This function checks
 * is the letter is uppsercase or not
 * @c:the argument that passed
 * by the user to check out
 * Return: r holde the value 0 or 1
 */

int _isupper(int c)
{

	int r;

	if (c <= 90 && c >= 65)
	{
		r = 1;
	} else
	{
		r = 0;
	}
	return (r);
}

0-memset.c/     0           0     0     644     381       `
#include "main.h"

/**
 * _memset - fills memory with a value
 * @s: Pointer to memory
 * @b: Value to be set
 * @n: Number of bytes
 * Description: Fills the memory pointed to by s with the value b for n bytes.
 * Return: Pointer to the filled memory
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     535       `
#include "main.h"

/**
 * _strcat - funtion concatenates
 * Description: This funtion
 * concatenates two strings
 * @dest: the string that we will add to
 * @src:  the string that we will add.
 * Return: dest new string
 */

char *_strcat(char *dest, char *src)
{
        int size;

        size = 0;

        while (dest[size] != '\0')
        {
                size++;
        }

        while (*src != '\0')
        {
                *(dest + size++) = *(src++);
        }
        *(dest + size++) = '\0';
        return (dest);
}

1-isdigit.c/    0           0     0     644     299       `
#include "main.h"

/**
 * _isdigit - check the digit
 * Description: This function check
 * if the argument gaving is it digit
 * or not
 * @c: is the argument pass in
 * Return: 1 digit , 0 something else
 */

int _isdigit(int c)
{
	int r;

	r = 0;
	if (c <= 57 && c >= 48)
		r = 1;
	return (r);
}

1-memcpy.c/     0           0     0     644     475       `
#include "main.h"

/**
 * _memcpy - copies data from source to destination
 * @dest: Pointer to destination memory
 * @src: Pointer to source memory
 * @n: Number of bytes to copy
 * Description: Copies n bytes of data from the
 * source memory area to the destination memory area.
 * Return: Pointer to the destination memory
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     633       `
#include "main.h"

/**
 * _strncat - funtion concatenates two strings
 * Description: This funtion
 * concatenates two strings
 * @dest: string that we will add to
 * @src: the string that we will adding
 * @n: bytes from src
 * Return: dest concatenated string
 *
 */

char *_strncat(char *dest, char *src, int n)
{
        int size;
        int i;

        size = 0;

        while (dest[size] != '\0')
        {
                size++;
        }

        for (i = 0; i < n && *src != '\0'; i++)
        {
                *(dest + (size + i)) = *(src + i);
        }

        *(dest + (size + i)) = '\0';

        return (dest);
}

2-strlen.c/     0           0     0     644     318       `
#include "main.h"

/**
 * _strlen - funtion return size
 * Description: This funtion that
 * return to you the size of you string
 * @s: The arrg that giving by the user
 * Return: size of the string
 *
 */

int _strlen(char *s)
{
	int counter = 0;

	while (*s != '\0')
	{
		counter++;
		s++;
	}

	return (counter);
}
2-strncpy.c/    0           0     0     644     466       `
#include "main.h"

/**
 * _strncpy - funtion copied strings
 * Description: This funtion
 * copies a string and act like strncpy
 * @dest: the string that we will copy into
 * @src:  the string that we will copy from.
 * @n: the number of bytes to copy
 * Return: dest copyed string
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];

	for ( ; i < n; i++)
		dest[i] = '\0';

	return (dest);
}
3-islower.c/    0           0     0     644     381       `
#include "main.h"

/**
 * _islower - check for lowercase
 * Description: function that checks
 * for lowercase and return 1 in the true
 * case and 0 if it  found it no't lowercase
 * @c: is argument that holde the letter to checked
 * Return: 0 (Don't get An Error)
 */

int _islower(int c)
{
	if (c <= 122 && 97 <= c)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	return (1);
}

3-puts.c/       0           0     0     644     302       `
#include "main.h"
#include <stdio.h>

/**
 * _puts - funtion prints string
 * Description: This funtion that
 * print a string for you
 * @str: the arrg that's giving by
 * the user
 * Return: void
 *
 */

void _puts(char *str)
{
	while (*str != '\0')
	{
		putchar(*str);
		str++;
	}
	putchar('\n');
}
3-strcmp.c/     0           0     0     644     483       `
#include "main.h"

/**
 * _strcmp - funtion check string
 * Description: This funtion
 * checks funtions if they are the same
 * or not act like strcmp
 * @s1: first string to compare with
 * @s2: secned string to compare with
 * Return: (0) if they the same (-15)
 * if the s1 > s2 and (15) if the s1 < s2
 */

int _strcmp(char *s1, char *s2)
{
	int i;
		for (i = 0; s1[i] != '\0' || s2[i] != '\0'; i++)
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
	}
	return (0);
}

3-strspn.c/     0           0     0     644     670       `
#include "main.h"

/**
 * _strspn - calculates the length of initial
 * segment with matching characters
 * @s: Pointer to the string to be checked
 * @accept: Pointer to the string with matching characters
 *
 * Description: Calculates the length of the
 * initial segment of string s that consists
 * of only characters from the accept string.
 *
 * Return: Length of the initial segment with matching characters
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int c = 0;
	char *t = accept;

	while (*s++)
	{
		while (*accept++)
			if (*(s - 1) == *(accept - 1))
			{
				c++;
				break;
			}
		if (!(*--accept))
			break;
		accept = t;
	}
	return (c);
}
4-isalpha.c/    0           0     0     644     346       `
#include "main.h"

/**
 * _isalpha - function check alphabet
 * Description: This function chekcs the
 * letter is alphabet or not that passd by @c
 * @c: is the argument that's toke the letter
 * Return: 0 (No Error)
 */

int _isalpha(int c)
{
	if ((c <= 122 &&  97 <= c) || (c <= 90 && c >= 65))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    0           0     0     644     531       `
#include "main.h"

/**
 * _strpbrk - searches a string for a set of bytes
 * Description: Searches the string for the
 * first occurrence of any byte from the set.
 * @s: Pointer to the string to be searched
 * @accept: Pointer to the set of bytes to be matched
 * Return: Pointer to the first matching
 * byte, or NULL if no match is found
 */

char *_strpbrk(char *s, char *accept)
{
	while (*s != '\0')
	{
		char *a;

		a = accept;

		while (*a != '\0')
		{
			if (*s == *a)
				return (s);
			a++;
		}
		s++;
	}
	return (0);
}

5-strstr.c/     0           0     0     644     428       `
#include "main.h"

/**
* _strstr - function better
* @haystack: it's haystack
* @needle: it's a needle
* Return: 0
*/

char *_strstr(char *haystack, char *needle)
{
	char *result = haystack, *fneedle = needle;

	while (*haystack)
	{
		while (*needle)
		{
			if (*haystack++ != *needle++)
			{
				break;
			}
		}
		if (!*needle)
		{
			return (result);
		}
		needle = fneedle;
		result++;
		haystack = result;
	}
	return (0);
}
6-abs.c/        0           0     0     644     335       `
#include "main.h"

/**
 * _abs - Compute the absolute value of a number
 * Description: This function takes an input
 * number and returns its absolute value.
 * @n: The number to compute the absolute value of
 * Return: The absolute value of the input number
 */
int _abs(int n)
{
	if (n < 0)
		return (n * -1);
	else
		return (n);
}

9-strcpy.c/     0           0     0     644     409       `
#include "main.h"
#include <stdio.h>

/**
 * _strcpy - funtion copy string
 * Description: This funtion
 * it's copy a string from the @src
 * @src: the string giving by the user
 * @dest: the arrg that we copy to .
print_rev  * Return: dest
 *
 */

char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (*(src + i))
	{
		*(dest + i) = *(src + i);
		i++;
	}
	*(dest + i) = *(src + i);

	return (dest);
}

100-atoi.c/     0           0     0     644     536       `
#include "main.h"
#include <stdio.h>

/**
 * _atoi- function that convert
 * Description: This funtion that
 * function that convert a string to an integer
 * @s: The arrg that giving by the user
 * Return: String.
 *
 */


int _atoi(char *s)
{
	int i;
	int res = 0;
	int sig = -1;
	int brk = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
			sig = sig * -1;
		if (s[i] >= '0' && s[i] <= '9')
		{
			res = res * 10;
			res -= (s[i] - '0');
			brk = 1;
			}
		else if (brk == 1)
		break;
	}
	res = sig * res;
	return (res);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

